{"version":3,"sources":["validator/rules.ts","HOCS/with-form-fields.hoc.tsx","components/app-field/app-field.component.tsx","components/app-text-field/app-text-field.component.tsx","components/app-phone-field/app-phone-field.component.tsx","components/app-checkout-form/app-checkout-form.component.tsx","components/app-order-table/app-order-table.component.tsx","pages/checkout/checkout.page.tsx","HOCS/with-loader.hoc.tsx"],"names":["emailRegexp","requiredRule","value","withFormFields","Inner","label","input","meta","error","touched","AppField","type","rest","TextField","classes","root","variant","Boolean","helperText","defaultProps","t","useTranslation","mask","onChange","validatorConfig","firstName","lastName","phone","email","test","delAddress","delCity","formOrder","cartItems","items","map","cartItem","size","selectedSize","id","count","quantity","AppCheckoutForm","setLoading","dispatch","useDispatch","handleOrder","checkoutFormValues","form","a","order","createOrder","Object","keys","forEach","key","change","resetFieldState","clearCartAction","onSubmit","validate","values","entries","reduce","errors","fieldName","fieldRules","fieldValue","validator","find","handleValidate","render","handleSubmit","className","name","component","AppTextField","AppPhoneField","Button","color","AppOrderTable","cartTotal","useSelector","selectCartTotal","withLoader","selectCartItems","displayName","props","useState","isLoading","style","display"],"mappings":"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","file":"static/js/5.4215aeeb.chunk.js","sourcesContent":["export type TRuleFunc = (value: string) => string | null;\nexport type TValidatorConfig = { [key: string]: TRuleFunc[] };\nexport type TErrorsMap = { [key: string]: string };\n\nconst emailRegexp = /^[a-zA-Z0-9.]+@[a-zA-Z0-9.]+\\.[a-zA-Z]{2,4}/;\n\nexport const requiredRule: TRuleFunc = (value) => {\n  if (value) {\n    return null;\n  }\n\n  return 'error.is_required';\n};\n\nexport const emailRule: TRuleFunc = (value) => {\n  if (emailRegexp.test(value)) {\n    return null;\n  }\n\n  return 'error.invalid_email';\n};\n\n// export const composeRules = (...funcs: Array<TRuleFunc>): TRuleFunc => {\n//   return (value) => {\n//     return funcs.reduce((error: null | string, fn) => {\n//       if (!error) {\n//         return fn(value);\n//       }\n//\n//       return error;\n//     }, null);\n//   };\n// };\n\nexport function handleValidate<V extends { [key: string]: string }>(\n  validatorConfig: TValidatorConfig,\n  values: V\n): TErrorsMap {\n  return Object.entries(validatorConfig).reduce(\n    (errors: TErrorsMap, [fieldName, fieldRules]) => {\n      const fieldValue = values[fieldName];\n\n      const findedErrors = fieldRules.map((validator) => validator(fieldValue));\n\n      const error = findedErrors.find(Boolean);\n\n      if (error) {\n        return {\n          ...errors,\n          [fieldName]: error,\n        };\n      }\n\n      return errors;\n    },\n    {}\n  );\n}\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\n\nexport interface FieldProps extends Partial<FieldRenderProps<string>> {\n  label: string;\n  error: string;\n}\n\nconst withFormFields = (Inner: React.ComponentType<FieldProps>) => {\n  return ({\n    label,\n    input,\n    meta,\n  }: FieldRenderProps<string>): React.ReactElement => {\n    const error: string = meta!.touched ? meta!.error : '';\n\n    return <Inner label={label} input={input} error={error} />;\n  };\n};\n\nexport default withFormFields;\n","import { TextField } from '@material-ui/core';\nimport React from 'react';\nimport { FieldProps } from '../../HOCS/with-form-fields.hoc';\nimport './app-field.styles.scss';\n\ninterface AppFieldProps extends FieldProps {\n  type?: string;\n}\n\nconst AppField = ({\n  type,\n  label,\n  input,\n  error,\n  ...rest\n}: AppFieldProps): React.ReactElement => (\n  <TextField\n    {...input}\n    {...rest}\n    classes={{ root: 'app-field' }}\n    type={type}\n    label={label}\n    variant=\"outlined\"\n    error={Boolean(error)}\n    helperText={error}\n  />\n);\n\nAppField.defaultProps = {\n  type: '',\n};\n\nexport default AppField;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport withFormFields, { FieldProps } from '../../HOCS/with-form-fields.hoc';\nimport AppField from '../app-field/app-field.component';\n\nconst AppTextField = ({\n  label,\n  input,\n  error,\n}: FieldProps): React.ReactElement => {\n  const { t } = useTranslation();\n\n  return <AppField input={input} label={label} error={t(error)} />;\n};\n\nexport default withFormFields(AppTextField);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport InputMask from 'react-input-mask';\nimport withFormFields, { FieldProps } from '../../HOCS/with-form-fields.hoc';\nimport AppField from '../app-field/app-field.component';\n\nconst AppPhoneField = ({\n  label,\n  input,\n  error,\n}: FieldProps): React.ReactElement => {\n  const { t } = useTranslation();\n\n  return (\n    <InputMask\n      mask=\"+38(999)-999-99-99\"\n      value={input!.value}\n      onChange={input!.onChange}\n    >\n      {() => <AppField type=\"tel\" label={label} error={t(error)} />}\n    </InputMask>\n  );\n};\n\nexport default withFormFields(AppPhoneField);\n","import { Button } from '@material-ui/core';\nimport { FormApi } from 'final-form';\nimport React from 'react';\nimport { Form, Field } from 'react-final-form';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { createOrder } from '../../api/requests';\nimport { clearCartAction } from '../../redux/cart/cart.actions';\nimport { TCartItemsEntries } from '../../redux/cart/cart.types';\nimport { IOrder } from '../../types/order.types';\nimport {\n  requiredRule,\n  TValidatorConfig,\n  handleValidate,\n  emailRule,\n} from '../../validator/rules';\nimport AppTextField from '../app-text-field/app-text-field.component';\nimport AppPhoneField from '../app-phone-field/app-phone-field.component';\nimport './app-checkout-form.styles.scss';\n\nexport type ICheckoutFormValues = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  delAddress: string;\n  delCity: string;\n};\n\ninterface IAppCheckoutFormProps {\n  cartItems: TCartItemsEntries;\n  setLoading: (isLoading: boolean) => void;\n}\n\nconst validatorConfig: TValidatorConfig = {\n  firstName: [requiredRule],\n  lastName: [requiredRule],\n  phone: [requiredRule],\n  email: [requiredRule, emailRule],\n  delAddress: [requiredRule],\n  delCity: [requiredRule],\n};\n\nconst formOrder = (\n  {\n    firstName,\n    lastName,\n    phone,\n    email,\n    delAddress,\n    delCity,\n  }: ICheckoutFormValues,\n  cartItems: TCartItemsEntries\n): IOrder => {\n  const items = cartItems.map(([, cartItem]) => ({\n    size: cartItem.selectedSize.id,\n    count: cartItem.quantity,\n  }));\n\n  return {\n    firstName,\n    lastName,\n    phone,\n    email,\n    delAddress,\n    delCity,\n    items,\n  };\n};\n\nconst AppCheckoutForm = ({\n  cartItems,\n  setLoading,\n}: IAppCheckoutFormProps): React.ReactElement => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  const handleOrder = async (\n    checkoutFormValues: ICheckoutFormValues,\n    form: FormApi<ICheckoutFormValues>\n  ): Promise<Error | null> => {\n    const order = formOrder(checkoutFormValues, cartItems);\n\n    setLoading(true);\n    try {\n      await createOrder(order);\n\n      Object.keys(checkoutFormValues).forEach((key) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        form.change(key, '');\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        form.resetFieldState(key);\n      });\n\n      dispatch(clearCartAction());\n    } catch (e) {\n      return e;\n    } finally {\n      setLoading(false);\n    }\n\n    return null;\n  };\n\n  return (\n    <Form\n      onSubmit={handleOrder}\n      validate={(values) =>\n        handleValidate<ICheckoutFormValues>(validatorConfig, values)\n      }\n      render={({ handleSubmit }) => (\n        <form className=\"app-checkout-form\" onSubmit={handleSubmit}>\n          <div className=\"app-checkout-subtitle\">\n            {t('form.checkout.title')}\n          </div>\n\n          <div className=\"app-checkout-form__row\">\n            <Field\n              name=\"firstName\"\n              label={t('label.first_name')}\n              component={AppTextField}\n            />\n          </div>\n\n          <div className=\"app-checkout-form__row\">\n            <Field\n              name=\"lastName\"\n              label={t('label.last_name')}\n              component={AppTextField}\n            />\n          </div>\n\n          <div className=\"app-checkout-form__row\">\n            <Field\n              name=\"phone\"\n              label={t('label.phone')}\n              component={AppPhoneField}\n            />\n          </div>\n\n          <div className=\"app-checkout-form__row\">\n            <Field\n              name=\"email\"\n              label={t('label.email')}\n              component={AppTextField}\n            />\n          </div>\n\n          <div className=\"app-checkout-form__row\">\n            <Field\n              name=\"delAddress\"\n              label={t('label.address')}\n              component={AppTextField}\n            />\n          </div>\n\n          <div className=\"app-checkout-form__row\">\n            <Field\n              name=\"delCity\"\n              label={t('label.city')}\n              component={AppTextField}\n            />\n          </div>\n\n          <div className=\"app-checkout-form__footer\">\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n              {t('actions.send_my_order')}\n            </Button>\n          </div>\n        </form>\n      )}\n    />\n  );\n};\n\nexport default AppCheckoutForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { selectCartTotal } from '../../redux/cart/cart.selectors';\nimport { TCartItemsEntries } from '../../redux/cart/cart.types';\nimport AppCartItems from '../app-cart-items/app-cart-items.component';\nimport './app-order-table.styles.scss';\n\ninterface IAppOrderTableProps {\n  cartItems: TCartItemsEntries;\n}\n\nconst AppOrderTable = ({\n  cartItems,\n}: IAppOrderTableProps): React.ReactElement => {\n  const cartTotal = useSelector(selectCartTotal);\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"app-order-table\">\n      <div className=\"app-checkout-subtitle\">\n        {t('page.checkout.total')}: {cartTotal}\n      </div>\n\n      <AppCartItems cartItems={cartItems} />\n    </div>\n  );\n};\n\nexport default AppOrderTable;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport AppCheckoutForm from '../../components/app-checkout-form/app-checkout-form.component';\nimport AppOrderTable from '../../components/app-order-table/app-order-table.component';\nimport './checkout.styles.scss';\nimport withLoader, { IWithLoaderProps } from '../../HOCS/with-loader.hoc';\nimport { selectCartItems } from '../../redux/cart/cart.selectors';\n\nconst CheckoutPage = ({ setLoading }: IWithLoaderProps): React.ReactElement => {\n  const cartItems = useSelector(selectCartItems);\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"main-title\">{t('page.checkout.title')}</h1>\n\n      <div className=\"app-checkout\">\n        <AppCheckoutForm setLoading={setLoading} cartItems={cartItems} />\n\n        <AppOrderTable cartItems={cartItems} />\n      </div>\n    </div>\n  );\n};\n\nexport default withLoader(CheckoutPage);\n","import React, { useState } from 'react';\nimport Spinner from '../components/spinner/spinner.component';\n\nexport interface IWithLoaderProps {\n  isLoading: boolean;\n  setLoading: (isLoading: boolean) => void;\n}\n\nconst withLoader = <P extends IWithLoaderProps>(\n  Inner: React.ComponentType<P>\n): React.FC<P & IWithLoaderProps> => {\n  // eslint-disable-next-line no-param-reassign\n  Inner.displayName = `withLoader(${Inner.displayName || Inner.name})`;\n\n  return (props) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n\n    return (\n      <>\n        {isLoading && <Spinner />}\n        <div\n          className=\"flex-container\"\n          style={isLoading ? { display: 'none' } : {}}\n        >\n          <Inner {...props} isLoading={isLoading} setLoading={setLoading} />\n        </div>\n      </>\n    );\n  };\n};\n\nexport default withLoader;\n"],"sourceRoot":""}